import java.util.Arrays;
import java.util.Comparator;

public class java {
    public static void main(String[] args) {
      int[][] arr={{2,1,2},{3,2,3},{2,2,8},{2,3,4},{1,2,1},{4,4,5},{1,1,4}};
      getMaxHeight(arr);
    }
    
  private static void getMaxHeight(int[][] arr){
    Arrays.sort(arr,new Comparator<int[]>(){
    @Override
    public int compare(int[] box1, int[] box2){
      return -box1[0]*box1[1]+box2[0]*box2[1];
    }
  });
  longestIncreasingSubsequence(arr);
}

private static int
longestIncreasingSubsequence(int[][] arr){
  int lis[]=new int[arr.length];
  lis[0]=arr[0][2];
  for(int i=0;i<par.length;i++){
    par[i]=i;
  }
  int maxLis=lis[0];
  int targetIndexOfLis=0;
  for (int row[]:arr)
  for(int i=1;i<arr.length;i++){
    int max=0;
    int target=i;
    for(int j=i-1;j>=0;j--){
      if(arr[i][0]<arr[j][0]&&arr[i][1]<arr[j][1]&&arr[i][2]<arr[j][2]){
        if(max<list[j]){
          max=list[j];
          target=j;
        }
      }
    }
    lis[i]=arr[i][2]+max;
    par[i]=target;
    if(maxLis<lis[i]) {
      maxLis=lis[i];
      targetIndexOfLis=i;
    }
  }
  int lookupIndex=targetIndexOfLis;
  
System.our.println(Arrays.toString(arr[lookupIndex]));
while(lookupIndex!=par[lookupIndex])
{
  lookupIndex=par[lookupIndex];
  
System.out.println(Arrays.toString(arr[lookupIndex]));

}
return maxLis;
}
}